{
  "version": 2,
  "nodes": {
    "n": "6",
    "r": "range(n)",
    "sales": "{Peter: { Jan: 10, Feb: 12 }, John: { Jan: 22, Feb: 55 }}",
    "$1": "42 + (r+1)*r",
    "total": "Object.keys(sales).reduce((sum, name)=>sum + sales[name],0)",
    "meta": "{operator: { binary: { '+': (l, r)=>l+r }}}",
    "patchMathJS": "require('https://dmaevsky.com/ellx_examples/patches/math.js').default",
    "math": "patchMathJS(require('https://cdn.pika.dev/mathjs/v6'))",
    "matrix": "math.matrix",
    "complex": "math.complex",
    "rnorm": "matrix(r) * r",
    "c": "complex('1+2i')",
    "cconj": "~c",
    "cc": "c*cconj",
    "delayed": "(expression, delay) => new Promise(resolve => setTimeout(() => resolve(expression()), delay))",
    "x": "15",
    "ms": "1000*(1+range(3))",
    "expr": "ms.map(delay=>delayed(()=>delay + x, delay))",
    "$5": "expr*expr",
    "url": "'https://ipinfo.io/ip'",
    "message": "'My IP address is: ' + fetch(url).text().trim()"
  },
  "layout": [,
    [,
      {
        "value": "Operator overloading and automatic asynchronous transforms"
      }
    ],
    [,
      {
        "value": "Ellx formulas actually support an extension of JavaScript grammar, implementing operator overloading technique known as \"transpilation at first evaluation\""
      }
    ],
    [,
      {
        "value": "By looking at the type and constructor of operators' arguments at first evaluation Ellx is able to transiple the original formula on the fly to implement special treatment"
      }
    ],
    [,
      {
        "value": "For native Arrays and Objects the operators are applied element-wise by default:"
      }
    ],
    [,
      {
        "value": 6,
        "node": "n"
      },
      {
        "value": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "node": "r"
      },,,,,,
      {
        "value": {
          "Peter": {
            "Jan": 10,
            "Feb": 12
          },
          "John": {
            "Jan": 22,
            "Feb": 55
          }
        },
        "node": "sales",
        "expansion": {
          "vertical": true,
          "labelsLeft": true,
          "secondary": true,
          "labelsTop": true,
          "height": 2,
          "width": 2
        }
      }
    ],
    [,,
      {
        "value": [
          42,
          44,
          48,
          54,
          62,
          72
        ],
        "node": "$1"
      }
    ],
    [,,,,,,,,
      {
        "value": {
          "Jan": 32,
          "Feb": 67
        },
        "node": "total",
        "expansion": {
          "vertical": false,
          "height": 1,
          "width": 2
        }
      }
    ],
    [,
      {
        "value": "You can add operator overloading support to any existing class by adding a Symbol.for('~ellxMeta') field to it's prototype, e.g."
      }
    ],
    [,
      {
        "value": {
          "operator": {
            "binary": {
              "+": "@@@func"
            }
          }
        },
        "node": "meta"
      }
    ],,
    [,
      {
        "value": "Here we load the patch for MathJS's Complex and Matrix classes"
      },,,,,
      {
        "value": "@@@func",
        "node": "patchMathJS"
      }
    ],
    [,
      {
        "value": "[Module https://cdn.pika.dev/mathjs/v6]",
        "node": "math"
      }
    ],
    [,
      {
        "value": "@@@func",
        "node": "matrix"
      },
      {
        "value": "@@@func",
        "node": "complex"
      }
    ],,
    [,
      {
        "value": 55,
        "node": "rnorm"
      },
      {
        "value": {
          "re": 1,
          "im": 2
        },
        "node": "c"
      }
    ],
    [,,
      {
        "value": {
          "re": 1,
          "im": -2
        },
        "node": "cconj"
      }
    ],
    [,,
      {
        "value": {
          "re": 5,
          "im": 0
        },
        "node": "cc"
      }
    ],,
    [,
      {
        "value": "Async transform"
      }
    ],,
    [,
      {
        "value": "Ellx is designed to simplify complex system integration tasks, which are often asynchronous by nature."
      }
    ],
    [,
      {
        "value": "If a result of any intermediate expression is a Promise it will be automatically waited for in the most efficient fashion: parallel calculations will still run in parallel"
      }
    ],
    [,
      {
        "value": "The following function calculates 'expression' after 'delay' in ms:"
      }
    ],
    [,
      {
        "value": "@@@func",
        "node": "delayed"
      }
    ],
    [,,
      {
        "value": 15,
        "node": "x"
      },
      {
        "value": "<- try changing x here"
      }
    ],
    [,
      {
        "value": "delay"
      },
      {
        "value": "expression"
      },
      {
        "value": "dependent calculations"
      }
    ],
    [,
      {
        "value": [
          1000,
          2000,
          3000
        ],
        "node": "ms",
        "expansion": {
          "vertical": true,
          "height": 3,
          "width": 1
        }
      },
      {
        "value": [
          1015,
          2015,
          3015
        ],
        "node": "expr",
        "expansion": {
          "vertical": true,
          "height": 3,
          "width": 1
        }
      },
      {
        "value": [
          1030225,
          4060225,
          9090225
        ],
        "node": "$5",
        "expansion": {
          "vertical": true,
          "height": 3,
          "width": 1
        }
      }
    ],,,,
    [,
      {
        "value": "As a consequence, you can easily use the results of network requests in your formulas as if they were synchronous:"
      }
    ],
    [,
      {
        "value": "(Caveat: the server must support CORS requests in order for this to work)"
      }
    ],
    [,
      {
        "value": "Example:"
      }
    ],
    [,
      {
        "value": "https://ipinfo.io/ip",
        "node": "url"
      }
    ],
    [,
      {
        "value": "My IP address is: 126.3.30.26",
        "node": "message"
      }
    ],
    [,
      {
        "value": "The formula looks as if it were synchronous, which makes possible to write code agnostic of execution timing in a purely reactive functional way"
      }
    ]
  ]
}