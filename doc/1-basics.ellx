{
  "version": 2,
  "nodes": {
    "a": "3",
    "b": "4",
    "$1": "Math.sqrt(a*a + b*b)",
    "gl": "{x:[-0.9061798459386639927976,-0.5384693101056830910363,0,0.5384693101056830910363,0.9061798459386639927976],w:[0.2369268850561890875143,0.4786286704993664680413,0.5688888888888888888889,0.4786286704993664680413,0.2369268850561890875143]}",
    "func": "range(5).map(deg=>x=>range(deg).reduce(acc=>acc*x,1))",
    "power2": "func.map(f=>f(2))",
    "result": "func.map(f => gl.x.map(f).reduce((acc, y, i)=>acc + y*gl.w[i], 0))",
    "n": "5",
    "cauchy": "range(n).map(i => range(n).map(j => 1 / (1 + i + j)))",
    "math": "require('https://cdn.pika.dev/mathjs/v6')",
    "det": "math.det(cauchy)",
    "ball": "{mass: 5, speed: 25}",
    "momentum": "b => b.mass * b.speed",
    "$2": "momentum(ball)"
  },
  "layout": [,
    [,
      {
        "value": "Ellx semantic model is only slightly different from the classical Excel spreadsheet. In a lot of ways you will find it intuitive and familiar, so let's outline here the main differences."
      }
    ],
    [,
      {
        "value": "Ellx cells don't use the Excel addressing scheme i.e. A11, $D$4 etc. Instead, all calculation graph nodes - cells that are referenced in other formulas - should be given a name."
      }
    ],
    [,
      {
        "value": "Like this (press F2 to see the formula):"
      }
    ],
    [,
      {
        "node": "a"
      },
      {
        "node": "b"
      }
    ],
    [,
      {
        "value": "Cells in the spreadsheet entered without an '=' sign (not named) are not part of the calculation graph and cannot be referenced in formulas"
      }
    ],
    [,
      {
        "value": "If you start a formula with an '=' sign, but don't name it, a generated name will be assigned:"
      }
    ],
    [,
      {
        "node": "$1"
      }
    ],,
    [,
      {
        "value": "Try:"
      }
    ],
    [,
      {
        "value": "- building your own calculation nodes: a node is described by an assignment statement: node_name = expression, where the latter may be any valid Javascript expression"
      }
    ],
    [,,
      {
        "value": "The expression may reference any other nodes on the same sheet by name"
      }
    ],
    [,
      {
        "value": "- renaming nodes: it will be automatically renamed in all dependent formulae"
      }
    ],,
    [,
      {
        "value": "Working with arrays, maps, and functions"
      }
    ],
    [,
      {
        "value": "A node of the calculation graph can be any JS object, including a function, a map or an array. Maps (JS objects) and arrays may be expanded in 2d using Shift-Alt-Down/Right shortcuts"
      }
    ],
    [,
      {
        "value": "Use Shift-Alt-Z/X to toggle left/top labels"
      }
    ],,
    [,
      {
        "value": "The following example calculates integrals over [-1;1] of x^j, j in {0,1,2,3,4} using Gauss-Legendre quadrature"
      }
    ],
    [,,,,
      {
        "value": "Polynomial"
      },,
      {
        "value": "Test (2^j)"
      },
      {
        "value": "Integrals over [-1;1]"
      }
    ],
    [,
      {
        "node": "gl",
        "expansion": {
          "vertical": false,
          "labelsTop": true,
          "secondary": true,
          "height": 5,
          "width": 2
        }
      },,,
      {
        "node": "func",
        "expansion": {
          "vertical": true,
          "height": 5,
          "width": 1
        }
      },,
      {
        "node": "power2",
        "expansion": {
          "vertical": true,
          "labelsLeft": true,
          "height": 5,
          "width": 1
        }
      },
      {
        "node": "result",
        "expansion": {
          "vertical": true,
          "height": 5,
          "width": 1
        }
      }
    ],,,,,,
    [,
      {
        "value": "Cachy matrix"
      },
      {
        "node": "n"
      }
    ],,
    [,,
      {
        "node": "cauchy",
        "expansion": {
          "vertical": true,
          "secondary": true,
          "labelsLeft": true,
          "labelsTop": true,
          "height": 5,
          "width": 5
        }
      }
    ],,,,,,
    [,
      {
        "value": "You can load any 3rd party external module published in ES2015 module format using a built-in require function, using dynamic import under the hood"
      }
    ],
    [,
      {
        "node": "math"
      }
    ],
    [,
      {
        "value": "Determinant"
      },
      {
        "node": "det"
      }
    ],,
    [,
      {
        "value": "Future development"
      }
    ],
    [,
      {
        "value": "- when an object constructed in-place is expanded it should be possible to edit individual fields: it will automatically modify the formula for the whole object:"
      }
    ],
    [,,
      {
        "node": "ball",
        "expansion": {
          "vertical": true,
          "labelsLeft": true,
          "height": 2,
          "width": 1
        }
      },
      {
        "node": "momentum"
      }
    ],
    [,,,
      {
        "node": "$2"
      },
      {
        "value": "Typing 6 instead of 5 for the mass should update it inside the formula for the 'ball'"
      }
    ],,
    [,
      {
        "value": "- modifying a cell inside an expanded calculation result should modify the formula in such a way that only that cell is overridden, e.g. cauchy1 = override(cauchy, [[1, 1, 999], [2, 2, 888]])"
      }
    ],
    [,
      {
        "value": "- parts of the formulae can be names, and destructuring assignments supported, e.g: [a, b] = [3, 4];  or ball = [mass = 5, speed = 25]"
      }
    ],
    [,
      {
        "value": "- the former would define 2 named nodes, and the latter 3."
      }
    ]
  ]
}